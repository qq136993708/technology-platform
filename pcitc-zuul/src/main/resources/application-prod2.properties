server.port=8764
spring.application.name=pcitc-zuul

#本服务实例提供给注册中心的注册地址
eureka.instance.ip-address=10.246.94.96
eureka.instance.prefer-ip-address=true

#注册中心的地址
eureka.instance.hostname1=10.246.94.104
eureka.instance.server.port1=8761

eureka.instance.hostname2=10.246.94.96
eureka.instance.server.port2=8761

eureka.instance.hostname3=10.246.94.94
eureka.instance.server.port3=8761

#注册中心要求的用户名和密码
registration.user.name=pcitc
registration.user.password=pcitc123

#默认的注册域
eureka.client.serviceUrl.defaultZone=http://${registration.user.name}:${registration.user.password}@${eureka.instance.hostname1}:${eureka.instance.server.port1}/eureka/,http://${registration.user.name}:${registration.user.password}@${eureka.instance.hostname2}:${eureka.instance.server.port2}/eureka/,http://${registration.user.name}:${registration.user.password}@${eureka.instance.hostname3}:${eureka.instance.server.port3}/eureka/


#路由规则
#禁止创建以服务名为前缀的路由规则
zuul.ignored-services="*"

#直接代理，不过路径中依然要出现服务提供者的路径：user-service
zuul.routes.pcitc-system-provider=/system-proxy/**
zuul.routes.pcitc-stp-provider=/stp-proxy/**
zuul.routes.pcitc-hana-provider=/hana-proxy/**

#前端pplus/pcitc-stp微服务，也通过zuul进行代理分发，判断请求的ip，对应此前端微服务，利用hash代理的方式
#可以让固定的ip访问者都访问某个固定的服务器（前端微服务集群的情况下），实现session共享问题，不过这种情况下如果某个服务器奔溃，需要特殊处理一下

#zuul.routes.system.path=/system-proxy/**
#zuul.routes.system.serviceId=pplus-system-feign
#zuul.routes.system.url=http://localhost:8887/user-service/

# 访问此zuul的请求需要验证的用户名密码（不指定的话，默认值是随机数）
security.basic.enabled=true
security.user.name=pcitc
security.user.password=pcitc123456

jwt.header=Authorization
jwt.secret=pcitcKey
jwt.expiration=6048000
jwt.tokenHead=Bearer 
jwt.route.authentication.path=auth
jwt.route.authentication.refresh=refresh
jwt.route.authentication.register=aFuth/register

#超时访问设置
#zuul代理url方式的超时
zuul.host.socket-timeout-millis=20000
zuul.host.connect-timeout-millis=20000

#zuul代理serviceId方式的超时
ribbon.SocketTimeout=20000
ribbon.ReadTimeout=20000

#熔断超时-SystemFallbackFeign
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000

spring.http.multipart.maxFileSize=1024Mb
spring.http.multipart.maxRequestSize=2048Mb

#设定HttpHeader请求头大小
server.tomcat.max-http-header-size=10240000

#是否开启重试功能
zuul.retryable=true
#对当前服务的重试次数
ribbon.MaxAutoRetries=5
#切换相同Server的次数
ribbon.MaxAutoRetriesNextServer=0
